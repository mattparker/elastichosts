#!/usr/bin/php
<?php


echo "\n\n ElasticHosts server provisioner \n\n ";


spl_autoload_register(function ($class) {
    include 'php/' . $class . '.php';
});



// Parse CLI arguments
$options = getopt("i::c::p::o::h", []);

// Show help
if (array_key_exists('h', $options)) {
    echo usage();
    exit(1);
}




// Check the inventory file
if (array_key_exists('i', $options)) {
    $inventory = $options['i'];
} else {
    $inventory = __DIR__ . '/server-inventory.json';
}

if (!file_exists($inventory) || !is_readable($inventory)) {
    exit("Inventory file `" . $inventory . "` not found or not readable.\n");
}

// Open the file and try and json_decode it:
$server_definition = file_get_contents($inventory);
$json_server_definition = json_decode($server_definition, true);

if (!$json_server_definition) {
    $json_error = json_last_error();
    if ($json_error) {
        exit("There was a problem decoding your json: " . json_last_error_msg());
    }
}
if ($json_server_definition === '' || count($json_server_definition) === 0) {
    exit("Your inventory doesn't obviously include anything");
}
if (!array_key_exists('servers', $json_server_definition)) {
    exit("Your json file requires a 'servers' item at the top level");
}




// Credentials
if (array_key_exists('c', $options)) {
    $credentials = $options['c'];
} else {
    $credentials = __DIR__ . '/set-eh-credentials.php';
}
if (!file_exists($credentials) || !is_readable($credentials)) {
    exit("Credentials file `" . $credentials . "` not found or not readable");
}
require_once $credentials;



// The output file
if (array_key_exists('o', $options)) {
    $output_file = $options['o'];
} else {
    $output_file = __DIR__ . '/servers-created.yml';
}
if (!file_exists($output_file)) {
    file_put_contents($output_file, "");
}
if (!is_writable($output_file)) {
    exit("Output file `" . $output_file . "` is not writable");
}





// Now run it:
try {

    $created_servers = create_servers($json_server_definition);

} catch (Exception $e) {

    exit("There was a problem: \n" . $e->getMessage());

}



// Prepend some comments to the ansible output
$ansible_output = '#' . PHP_EOL
    . '# Ansible inventory file. Generated by ElasticHosts provisioner ' . date('d/m/Y H:i:s') . PHP_EOL
    . '#' . PHP_EOL;

if (array_key_exists('meta', $json_server_definition)) {
    foreach ($json_server_definition['meta'] as $commentKey => $commentValue) {
        $ansible_output .= '# ' . $commentKey . ' : ' . $commentValue . PHP_EOL;
    }
}

// Now handle the output...
$ansible_output .= generate_ansible_inventory_output($created_servers);

file_put_contents($output_file, $ansible_output);













/**
 * Creates some servers from a spec
 *
 * @param array $spec
 * @return array
 */
function create_servers (array $spec) {

    $allGroups = [];

    $ehServerBuilder = new EHServerBuilder();
    $ehDriveBuilder = new EHDriveBuilder();
    $runner = new CommandLineRunner();
    $ehBuilder = new EHBuilder($ehServerBuilder, $ehDriveBuilder, $runner);


    foreach ((array)$spec['servers'] as $serverGroupName => $serverInfo) {

        $group = new EHServerGroup($serverGroupName);
        foreach ($serverInfo as $server) {

            $server = new EHServer($server);

            $ehBuilder->build($server);

            $group->addServer($server);

        }
        $allGroups[] = $group;

    }

    return $allGroups;

}


/**
 * @param EHServerGroup[] $serverGroups
 * @return string
 */
function generate_ansible_inventory_output (array $serverGroups) {
    $out = [];
    foreach ($serverGroups as $serverGroup) {
        $out[] = '[' . $serverGroup->getName() . ']';
        foreach ($serverGroup->getServers() as $server) {
            $out[] = $server->getName() . ' ansible_ssh_host=' . $server->getPublicIp();
        }
        $out[] = PHP_EOL;
    }
    return implode(PHP_EOL, $out);
}


/**
 * Help!
 * @return string
 */
function usage () {
    return <<<USAGE

This is a script to build some servers on ElasticHosts (www.elastichosts.com)

This script takes the following options

    -i     Path to inventory file.  If not given, will try and
             use ./server-inventory.json
    -c     Path to credentials file.  If not given, will try
             and use ./set-eh-credentials.php
    -p     Provider - where you want servers to appear.
             Currently only 'eh' is supported.
    -o     Path to output file.  If not given, will use
             ./servers-created.yml
    -h     Show this help and exit

USAGE;

}